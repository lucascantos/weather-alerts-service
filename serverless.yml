service: weather-alerts-service

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: non-linux
    zip: true
  LOCATION_BUCKET: ${env:LOCATION_BUCKET}
  AUTOMATO_BUCKET: ${env:AUTOMATO_BUCKET}
  DYNAMO_TABLE: ${env:DYNAMO_TABLE}


provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
      Resource: 
        - "arn:aws:s3:::${self:custom.USERS_BUCKET}"
        - "arn:aws:s3:::${self:custom.REDEMET_BUCKET}"
        - "arn:aws:s3:::${self:custom.USERS_BUCKET}/*"
        - "arn:aws:s3:::${self:custom.REDEMET_BUCKET}/*"

    - Effect: Allow
      Action:
        - s3:PutObjectAcl
        - s3:PutObject
        - s3:GetObject
        - s3:HeadObject
        - s3:ListBucket
      Resource: 
        - "arn:aws:s3:::${env:BUCKET_NAME}"
        - "arn:aws:s3:::${env:BUCKET_NAME}/*"


package:
  exclude:
    - node_modules/**
    - venv/**

functions:
  hello:
    handler: handler.hello
    timeout: 120
    layers:
      - arn:aws:lambda:${env:DEFAULT_REGION}:${env:AWS_ID}:layer:opencv-py38:1
    events:
      - s3: ${env:BUCKET_NAME}
      - schedule: rate(10 minutes)

# you can add CloudFormation resource templates here
resources:
 Resources:
   NewResource:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${env:BUCKET_NAME}
